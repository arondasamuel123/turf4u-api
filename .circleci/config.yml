version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.8
        environment:
          PIPENV_VENV_IN_PROJECT: true
          TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/circle_test
          MODE: test
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8/site-packages
      - restore_cache: 
          key: deps9-{{.Branch}}-{{checksum  "Pipfile.lock"}}
      - run:
          name: Install dependencies
          command:  |
            pip install pipenv
            pipenv install -d
      - save-cache:
          key: deps9-{{ .Branch}}-{{checksum "Pipfile.lock"}}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.8/site-packages"
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m 
      - run:
          name: Run tests and generate report 
          command: |
            pipenv run coverage run --source . --omit=*/venv/*,*/migrations/* manage.py test
            pipenv run coverage html
      - store_artifacts:
          path: ".coverage.html_report"
      
      




    