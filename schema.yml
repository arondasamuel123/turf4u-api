swagger: "2.0"
info:
  description: "This is a sample Turf4uAPI server."
  version: "1.0.0"
  title: "Swagger Turf4U API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "turf4u-sandbox.herokuapp.com"
basePath: "/"
tags:
- name: "user"
  description: "Operations about user"
  
- name: "organizations"
  description: "Operations about organizations"
  
- name: "turfs"
  description: "Operations about turfs"
  
- name: "timeslots"
  description: "Operations about timeslots"
  
- name: "booking"
  description: "Operations about bookings"
  
- name: "account activation"
  description: "Activate user account"
  
schemes:
- "https"
- "http"
paths:
  /api/organizations/create:
    post:
      tags:
      - "organizations"
      summary: "Add a new oraganization to create a turf"
      description: ""
      operationId: "addOrganization"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Organization object that needs to be created "
        required: true
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BasicAuth: []
    
    
  
  
  /api/organizations/{orgId}:
    get:
      tags:
      - "organizations"
      summary: "Find organiztion by ID"
      description: "Returns a single organization"
      operationId: "getOrgById"
      produces:
      - "application/json"
      parameters:
      - name: "orgId"
        in: "path"
        description: "ID of organization to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Organization not found"
      security:
      - BasicAuth: []
    patch:
      tags:
      - "organizations"
      summary: "Update an organization by ID"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "orgId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      
      - in: "body"
        name: "body"
        description: "Update any field in Organization object"
        required: true
        schema:
          $ref: "#/definitions/Organization"
        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BasicAuth: []
      
  /organizations/{userId}:
    get:
      tags:
      - "organizations"
      summary: "Find organiztion by ID"
      description: "Returns a single organization"
      operationId: "getOrgByUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Organization not found"
      security:
      - BasicAuth: []
    
      
  /api/turfs:
    get:
      tags:
      - "turfs"
      summary: "Returns turfs created by organizations"
      description: "Returns list of turfs that are available"
      operationId: "getTurfs"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
              type: "array"
              items:
                $ref: '#/definitions/Turf'
            
      security:
      - BasicAuth: []
  /api/turfs/create/{orgId}:
    post:
      tags:
      - "turfs"
      summary: "Create a turf "
      description: ""
      operationId: "Create"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Turf created"
        required: true
        
      - in: "path"
        name: "orgId"
        description: "Organization Id associated with a turf"
        required: true
        type: "string"
        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Turf"
        "400":
          description: "Invalid Turf creation"
      security:
      - BasicAuth: []
  /api/turfs/{orgId}:
    get:
      tags:
      - "turfs"
      summary: "Find turf by org id"
      description: "ID will be randomly generated UUID numbers"
      operationId: "getTurfById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orgId"
        in: "path"
        description: "ID of turf that needs to be fetched"
        required: true
        type: "string"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Turf"
        "400":
          description: "Invalid input"
        "404":
          description: "Org not found"
      security:
      - BasicAuth: []
    
    
  /api/turfs/upload/{turfId}:
    patch:
      tags:
      - "turfs"
      summary: "update turf image field"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "turfId"
        in: "path"
        description: "ID of turf to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid Input"
        "404":
          description: "Turf not found"
      security:
      - BasicAuth: []
    
  /user/register/:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
        "400":
          description: "Invalid input"
  

  /user/obtain-token/:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  
      
  /user/profile:
    get:
      tags:
      - "user"
      summary: "Get user"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
      
      security:
      - BasicAuth: []
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid input"
        "404":
          description: "User not found"
        "200":
          description: "User updated"
          schema:
            $ref: "#/definitions/User"
      security:
      - BasicAuth: []
    
      
  
  /api/timeslots/{turfId}:
    post:
      tags:
      - "timeslots"
      summary: "Create timeslots for a specific turf"
      description: ""
      operationId: "timeslotsforTurf"
  
      produces:
      - "application/json"
      parameters:
      - name: "turfId"
        in: "path"
        description: "ID of turf to update"
        required: true
        type: "string"
     
      - name: "body"
        in: "body"
        description: "Created timeslot  object"
        required: true
        schema:
          type: "array"
          items:
            $ref: '#/definitions/TimeSlots'
      responses:
        "201":
          description: "successful operation"
          schema:
              type: "array"
              items:
                $ref: '#/definitions/TimeSlots'
        "400":
          description: "Invalid input"
        
      security:
      - BasicAuth: []
    get:
      tags:
      - "timeslots"
      summary: "Get timeslots by turf id"
      description: ""
      operationId: "getTimeSlotsByTurfId"
      produces:
      - "application/json"
      parameters:
      - name: "turfId"
        in: "path"
        description: "ID of booking based on turf"
        required: true
        type: "string"
        
      responses:
        "200":
          description: "successful operation"
          schema:
              type: "array"
              items:
                $ref: '#/definitions/TimeSlots'
        "400":
          description: "Invalid input"
        "404":
          description: "Turf not found"
      security:
      - BasicAuth: []
          
    put:
      tags:
      - "timeslots"
      summary: "Updated timeslots by turf id "
      description: "This can only be done by the logged in turf manager"
      operationId: "updateTimeslots"
      produces:
      - "application/json"
      parameters:
      - name: "turfId"
        in: "path"
        description: "ID of turf to update"
        required: true
        type: "string"
     
      - in: "body"
        name: "body"
        description: "Updated timeslot object"
        required: true
        schema:
          $ref: "#/definitions/TimeSlots"
      responses:
        "400":
          description: "Invalid input"
        "404":
          description: "Turf not found"
        "200":
          description: "TImeslot updated"
          schema:
            $ref: "#/definitions/TimeSlots"
      security:
      - BasicAuth: []
    
    
  /api/book/{timeslotsId}:
    post:
      tags:
      - "booking"
      summary: "Make a boooking for a specific timeslot"
      description: "User can make a booking for a specific timeslot"
      operationId: "makeBooking"
      
      parameters:
      - name: "timeslotsId"
        in: "path"
        description: "ID of timeslot"
        required: true
        type: "string"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Booking'
        "400":
          description: "Invalid input"
      security:
      - BasicAuth: []
            
  /api/bookings/{timeslotsId}:
    get:
      tags:
      - "booking"
      summary: "Get bookings made for a specific timeslot"
      description: "Manager can know which bookings have been made for a timeslot"
      operationId: "getBookingsBytimeslotId"
      
      parameters:
      - name: "timeslotsId"
        in: "path"
        description: "ID of timeslot"
        required: true
        type: "string"
      
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items: 
              $ref: '#/definitions/Booking'
      security:
      - BasicAuth: []
  
  /api/user/bookings/:
    get:
      tags:
      - "booking"
      summary: "Get bookings for a specific user"
      description: "Turf users can view the bookings they have made"
      operationId: "getBookingByUser"
      
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items: 
              $ref: '#/definitions/Booking'
      security:
      - BasicAuth: []
  
  /api/booking/{bookingId}:
    patch:
      tags:
      - "booking"
      summary: "Manager can update the bookings payment status"
      description: "Turf Managers can update the payment status of booking either to complete or not paid"
      operationId: "updateBookingbyId"
      
      parameters:
      - name: "bookingId"
        in: "path"
        description: "ID of booking"
        required: true
        type: "string"
      
      - in: "body"
        name: "body"
        description: "Updated timeslot object"
        required: true
        schema:
          $ref: "#/definitions/Booking"
      
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Booking'
      security:
      - BasicAuth: []
            
    delete:
      tags:
      - "booking"
      summary: "Delete booking by ID"
      description: "Manager can delete a booking when payment is complete"
      operationId: "deleteBookingById"
      
      parameters:
      - name: "bookingId"
        in: "path"
        description: "ID of booking"
        required: true
        type: "string"
        
      responses:
        "204":
          description: "Booking deleted"
      security:
      - BasicAuth: []
      
  /activate:
    post:
      tags:
      - "account activation"
      summary: "Validate token provided in query parameter"
      description: "This request will validate the token generated for a user when confirming an email"
      operationId: "ValidateToken"
      
      parameters:
      - name: "token"
        in: "query"
        type: "string"
        description: "The actual token that will be provided to the user"
      
      responses:
        "200":
          description: "Account activated"
        "400":
          description: "Invalid token provided"
      
  

    
          
securityDefinitions:
  BasicAuth:
    type: basic
definitions:
  Turf:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      turf_name:
        type: "string"
      no_of_pitches:
        type: "integer"
      turf_image:
        type: "string"
      orgId:
        type: "integer"
        format: "int64"
      
    xml:
      name: "Turf"
  Organization:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      organiztion_name:
        type: "string"
      contact_number:
        type: "string"
      organization_email:
        type: "string"
      organization_tin:
        type: "integer"
      org_certificate:
        type: "string"
      is_verified:
        type: "boolean"
        
    xml:
      name: "Organization"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      password:
        type: "string"
      is_manager:
        type: "boolean"
        
    xml:
      name: "User"
 
      
  
  TimeSlots:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      turfId:
        type: "integer"
        format: "int64"
      start_time:
        type: "string"
        format: "time"
      stop_time:
        type: "string"
        format: "time"
      price:
        type: "integer"
    xml:
      name: "Timeslots"
      
  
  Booking:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      timeslotId:
        type: "integer"
        format: "int64"
      date_booked:
        type: "string"
        format: "date"
      payment_method:
        type: "string"
        
      payment_status:
        type: "string"
    xml:
      name: "Booking"
  
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
